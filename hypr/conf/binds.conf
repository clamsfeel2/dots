# l -> locked, aka. works also when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# t -> transparent, cannot be shadowed by other binds.

$mod = SUPER

# Move active window to specific monitor
bind = $mod, 2, movecurrentworkspacetomonitor, DP-3
bind = $mod, 2, movecurrentworkspacetomonitor, DP-2
bind = $mod, 2, movecurrentworkspacetomonitor, HDMI-A-1 
bind = $mod, 1, movecurrentworkspacetomonitor, eDP-1
bind = $mod + SHIFT, 2, movewindow, mon:DP-3
bind = $mod + SHIFT, 2, movewindow, mon:DP-2
bind = $mod + SHIFT, 2, movewindow, mon:HDMI-A-1 
bind = $mod + SHIFT, 1, movewindow, mon:eDP-1

bind = $mod, f, fullscreen,0
bind = $mod + SHIFT, f, fullscreen,1
bind = $mod, return, exec, alacritty 
bind = $mod, q, killactive,
bind = $mod, e, exit,
bind = $mod, y, togglefloating,
bind = ALT, c, centerwindow
bind = $mod, p, pin
bindr = $mod, $mod_L, exec, pkill rofi || rofi -wayland -combi-modi window,drun,ssh,run -show drun
bind = $mod, m, pseudo, # dwindle
bind = $mod, s, togglesplit, # dwindle

# Move focus with mod + vim h, j, k, l
bind = $mod, h, cyclenext
bind = $mod, l, cyclenext
bind = $mod, k, cyclenext
bind = $mod, j, cyclenext

# Switch workspaces with control + [0-9]
bind = CONTROL, 1, workspace, 1
bind = CONTROL, 2, workspace, 2
bind = CONTROL, 3, workspace, 3
bind = CONTROL, 4, workspace, 4
bind = CONTROL, 5, workspace, 5
bind = CONTROL, 6, workspace, 6
bind = CONTROL, 7, workspace, 7
bind = CONTROL, 8, workspace, 8
bind = CONTROL, 9, workspace, 9
bind = CONTROL, 0, workspace, 10

# Move active window to a workspace with control + shift + [0-9]
bind = CONTROL + SHIFT, 1, movetoworkspace, 1
bind = CONTROL + SHIFT, 2, movetoworkspace, 2
bind = CONTROL + SHIFT, 3, movetoworkspace, 3
bind = CONTROL + SHIFT, 4, movetoworkspace, 4
bind = CONTROL + SHIFT, 5, movetoworkspace, 5
bind = CONTROL + SHIFT, 6, movetoworkspace, 6
bind = CONTROL + SHIFT, 7, movetoworkspace, 7
bind = CONTROL + SHIFT, 8, movetoworkspace, 8
bind = CONTROL + SHIFT, 9, movetoworkspace, 9
bind = CONTROL + SHIFT, 0, movetoworkspace, 10

# Move/resize windows with mod + LMB/RMB and dragging
bindm = $mod, mouse:272, movewindow
bindm = $mod, mouse:273, resizewindow

# Move focused window up, right, left, down
bind = $mod + SHIFT, h, movewindow, l
bind = $mod + SHIFT, l, movewindow, r
bind = $mod + SHIFT, k, movewindow, u
bind = $mod + SHIFT, j, movewindow, d

# Speaker
bindle =, XF86AudioRaiseVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ +2%
bindle =, XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -2%
bindle =, XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
# Mic
bindle = $mod,XF86AudioRaiseVolume, exec, pactl set-source-volume @DEFAULT_SOURCE@ +2%
bindle = $mod,XF86AudioLowerVolume, exec, pactl set-source-volume @DEFAULT_SOURCE@ -2%
bindle =,XF86AudioMicMute, exec, pactl set-source-mute @DEFAULT_SOURCE@ toggle
# Brightness CONTROL
bindle =, XF86MonBrightnessUp, exec, brightnessctl set +3%
bindle =, XF86MonBrightnessDown, exec, brightnessctl set 3%-
# Blue Light Filter
bindle = $mod, XF86MonBrightnessUp, exec, busctl --user -- call rs.wl-gammarelay / rs.wl.gammarelay UpdateTemperature n -200
bindle = $mod, XF86MonBrightnessDown, exec, busctl --user -- call rs.wl-gammarelay / rs.wl.gammarelay UpdateTemperature n +200
bindle = $mod, XF86Display, exec, busctl --user -- set-property rs.wl-gammarelay / rs.wl.gammarelay Temperature q 6500
bindle = $mod, XF86Messenger, exec, busctl --user -- set-property rs.wl-gammarelay / rs.wl.gammarelay Temperature q 4500
bindle = $mod, XF86Go, exec, busctl --user -- set-property rs.wl-gammarelay / rs.wl.gammarelay Temperature q 3200
bindle = $mod, Cancel, exec, busctl --user -- set-property rs.wl-gammarelay / rs.wl.gammarelay Temperature q 2300
# Media CONTROL
bindle =, XF86Favorites, exec, playerctl play-pause

# Getting screen color
bind = $mod + SHIFT, print, exec, dunstify $(hyprpicker --autocopy)
# Screenshots
# Current window
bind = $mod, print, exec, wl-copy < $(~/.local/bin/grimshot --notify save active)
# Select area
bind =, print, exec, wl-copy < $(~/.local/bin/grimshot --notify save area)

# Clipboard
bind = $mod, c, exec, cliphist list | rofi -dmenu -p "clipboard" | cliphist decode | wl-copy

# Scratchpad
bind = ALT, h, movetoworkspace, special:signal
bind = ALT, m, movetoworkspace, special:minimize
bind = ALT + SHIFT, h, movetoworkspace, empty
bind = ALT, TAB, togglespecialworkspace, signal
bind = ALT, t, togglespecialworkspace, minimize

# RESIZE
# will switch to a submap called resize
bind = ALT, r, submap, resize
# will start a submap called "resize"
submap=resize
# sets repeatable binds for resizing the active window
binde =, l, resizeactive, 10 0
binde =, h, resizeactive, -10 0
binde =, k, resizeactive, 0 -10
binde =, j, resizeactive, 0 10
# use reset to go back to the global submap
bind = CONTROL, c, submap, reset 
# will reset the submap, meaning end the current one and return to the global one
submap = reset
# ENDS RESIZE
