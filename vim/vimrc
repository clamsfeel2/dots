set encoding=utf-8
set nocompatible
filetype on
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-eunuch'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'elkowar/yuck.vim'
Plugin 'preservim/nerdtree'
Plugin 'dart-lang/dart-vim-plugin'
Plugin 'thosakwe/vim-flutter'
call vundle#end()
filetype plugin indent on
filetype plugin on
set modeline
syntax enable
set mouse=a
set number
set relativenumber
set tabstop=4
set shiftwidth=4
set softtabstop=4
set title
set autoindent
set shiftround
set wrap
set linebreak
set smoothscroll
set display+=lastline
set showmatch
set matchpairs+=(:),{:},[:],<:>

" Should not allow scatch preview to open... ever
set completeopt-=preview
let g:vimtex_view_method = 'zathura'
" Changing leader from '\' to space
let mapleader="\<Space>"
" set background=dark
set background=
" Overrides text width from /usr/share/vim/vim91/ftplugin/vim.vim line 71 to 0 so comments can be as long as I want
augroup myOverrides
    autocmd!
    autocmd FileType vim set textwidth=0
augroup END

" FLUTTER
let g:flutter_show_log_on_run = "tab"
let g:flutter_autoscroll = 0
augroup dart_mapping
    autocmd!
    autocmd FileType dart nnoremap <buffer> <F5> :FlutterRun<CR>
augroup END

" Dart-vim-plugin configuration
let g:dart_auto_popup_quickfix = 1 " Automatically open quickfix window
let g:dart_html_in_string = v:true
let g:dart_style_guide = 4
let g:dart_trailing_comma_indent = v:true
let g:dart_corelib_highlight = v:true

" CPP-SETTINGS:
" Lint .h files as C++, not C
let g:ale_python_pylint_options = '--disable=C0301,missing-function-docstring,missing-class-docstring,missing-module-docstring'
let g:ale_python_pylint_options = '--disable=C0114'
let g:ale_pattern_options_enabled = 1
let g:ale_pattern_options = { '\.h$': { 'ale_linters': { 'cpp' : ['cc', 'gcc', 'clang'] } } }

" Set flags for gcc/clang
let cpp_opts = '-std=c++20 -Wall -Wextra'
" let g:ale_linters = { 'cpp': ['cc', 'gcc', 'clang'] }
let g:ale_linters = {'cpp': ['cc', 'gcc', 'clang'], 'python': ['pylint']}
let g:ale_cpp_cc_options    = cpp_opts
let g:ale_cpp_gcc_options   = cpp_opts
let g:ale_cpp_clang_options = cpp_opts

" Hacky way kinda to compile and run code with F5 if leader key is appended then it compiles only the file that is open
autocmd FileType cpp nnoremap t<F5> :!g++ -std=c++20 -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow -Woverloaded-virtual *.cpp && timr ./a.out && rm a.out $2>/dev/null<CR>
autocmd FileType cpp nnoremap <F5> :!g++ -std=c++20 -Wall *.cpp && ./a.out && rm a.out $2>/dev/null<CR>
autocmd FileType cpp nnoremap <leader><F5> :!g++ -std=c++20 -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow -Woverloaded-virtual % && ./a.out && rm a.out $2>/dev/null<CR>
autocmd FileType cpp nnoremap <leader>t<F5> :!g++ -std=c++20 -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow -Woverloaded-virtual % && timr ./a.out && rm a.out $2>/dev/null<CR>
autocmd FileType cpp nnoremap <leader>c<F5> :!g++ -std=c++20 -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow -Woverloaded-virtual % && ./a.out \| wl-copy && rm a.out $2>/dev/null<CR>

autocmd FileType cpp nnoremap JSON :!g++ -std=c++20 -ljsoncpp -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow -Woverloaded-virtual % && ./a.out && rm a.out $2>/dev/null<CR>

" For C
autocmd FileType c nnoremap <leader><F5> :!gcc -std=c++20 -Wall -Wextra -Wfloat-equal -Wundef -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-declarations -Wredundant-decls -Wshadow % && ./a.out && rm a.out $2>/dev/null<CR>

" TYPING 'DEBUG' IN NORMAL MODE TO INSERT GOOD DEBUG ISH
autocmd FileType cpp nnoremap DEBUG o#define P_DEBUG 1<Esc>o#if P_DEBUG == 1<Esc>o#define LOG(x) std::cout << x << std::endl<Esc>o#else<Esc>o#define LOG(x)<Esc>o#endif

" Allows me to press F11 to see how many occurences of searched word there are
function! SearchAndCount()
    let search_pattern = @/
    execute ':%s/' . search_pattern . '//n'
    return search_pattern
endfunction
nnoremap <F11> :let @/ = SearchAndCount()<CR>

" CONTROL+D & U TO MOVE UP AND DOWN MORE

" FINDING FILES
"     Allows to enter :find [file path] and hit tab for fzf like search for files
set path +=**
set wildmenu

" DUPLCATE LINE SHORTCUT
nnoremap <C-d> yyp

" BUFFER "
nnoremap gb :buffers<CR>:buffer<Space>
nnoremap <leader>bn   :bprevious<CR>
nnoremap <leader>bp :bnext<CR>

command SVR source $MYVIMRC

" TABS "
" TAB BINDS "
"" Cycling thorugh tabs 
nnoremap <leader>l gt
nnoremap <leader>h gT
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" To delete entire doucment and paste what's in clipboard
nnoremap dae :%!wl-paste -n<CR>

"" STATUS LINE AND TABS AND FOLDS COLORING
" Opening help in new tab every time
set splitright
set fillchars=vert:│,fold:┈,diff:┈ 
"set laststatus=1
set statusline +=%1*\ %n\ %*            "buffer number
"set statusline +=%5*%{&ff}%*            "file format
"set statusline +=%3*%y%*                "file type
"set statusline +=%4*\ %<%F%*            "full path
set cursorline
"set cursorlineopt=number
" Turns off highlight
highlight CursorLine ctermbg=NONE guibg=NONE gui=NONE cterm=NONE 
" Turns on color of line numbers line color
hi CursorLineNr term=bold cterm=bold ctermfg=109 ctermbg=NONE  gui=bold
highlight LineNr ctermfg=gray guifg=#555555

set statusline +=%2*%m%r%w\                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%1*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%1*0x%04B\ %*          "character under cursor
hi User1 ctermfg=white
hi User2 ctermfg=white cterm=bold
hi User3 ctermfg=white cterm=bold     "file type
hi User4 ctermfg=white                "file path
hi User5 ctermfg=white                "file format
hi TabLineFill term=bold cterm=bold 
hi TabLine ctermfg=Grey ctermbg=NONE cterm=NONE
hi TabLineSel cterm=bold ctermfg=Green ctermbg=NONE
hi Folded ctermbg=NONE ctermfg=white term=bold

" FOR SPELL CHECKING
" Set spell checking for text, markdown, and TeX files
hi clear SpellBad
hi SpellBad cterm=underline ctermul=1 ctermfg=red
hi clear SpellCap
hi SpellCap cterm=underline ctermul=0 ctermfg=blue
" hi SpellCap cterm=NONE  
autocmd BufNewFile,BufRead *.txt,*.md,*.tex setlocal spell
nnoremap sc [sz=
" Function to set nospell when entering a help buffer
function! SetNoSpell()
    if &filetype == 'help'
        setlocal nospell
    endif
endfunction
" Automatically call SetNoSpell when entering a buffer
autocmd BufEnter *.txt,*.md,*.tex call SetNoSpell()

" For highlighting search results
set hlsearch  " enabling searching
set incsearch " enabling show as I type
hi IncSearch cterm=bold ctermfg=blue ctermbg=NONE
hi Search cterm=bold ctermfg=blue ctermbg=NONE
" Allows Enter key to turn off search highlight
nnoremap <CR> :noh<CR>
" Maps control+w+w to control+w
nnoremap <C-w> <C-w>w
" NERDTREE
:let NERDTreeQuitOnOpen = 0
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
" Start NERDTree. If a file is specified, move the cursor to its window.
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
" For when typing :Explore -- first one gets rid of banner... either way just use nerdtree
let g:netrw_banner = 0
" Get's rid of border color
highlight VertSplit cterm=NONE
"let g:netrw_browse_split = 4

" SYNTAX HIGHLIGHTING
" Enable highlighting of C++11 attributes
let g:cpp_attributes_highlight = 1
" Highlight struct/class member variables (affects both C and C++ files)
let g:cpp_member_highlight = 1
" Put all standard C and C++ keywords under Vim's highlight group 'Statement'
" (affects both C and C++ files)
let g:cpp_simple_highlight = 1
" For markdown syntax --- not sure if needed
autocmd FileType markdown syntax on

" PLUGIN SETTINGS
" Gutentags -- ctags automator cuz every solution I had sucked so I use plugin :(
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['*.cpp', '.git']
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/') " all tags will be dir not random locations
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
" Files to exclude form ctag generation
let g:gutentags_ctags_exclude = [
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]

" YOUCOMPLETEME
" Uncommnet to turn inlay hints on
" let g:ycm_enable_inlay_hints = 1
" needed for c++17
" Add syntax highlighting rules for .bash_functions files
au BufNewFile,BufRead .bash_functions set filetype=sh
let g:ycm_global_ycm_extra_conf = '/home/user/.vim/bundle/YouCompleteMe/ycm_extra_conf.py'
let g:ycm_always_populate_location_list = 1
" Changes color for YCM popup window 15 white 3 yellow
highlight Pmenu ctermfg=225 cterm=bold ctermbg=NONE guifg=#ffffff guibg=NONE
" turn off automatic YouCompleteMe cursor hover info
let g:ycm_auto_hover = ''
" toggle language hover info with F12
map <F12> <plug>(YCMHover)
" Mapping to RefactorRename
nnoremap <silent> <S-F12> :execute 'YcmCompleter RefactorRename' input('Rename to: ')<CR>
" Changed the color of when fixme or todo are typed
highlight todo ctermfg=220 cterm=bold ctermbg=NONE
highlight fix ctermfg=228 cterm=bold ctermbg=NONE

" KEY BINDINGS 
nnoremap <C-/> gcc
" Getting into block visual mode and exiting visual mode ezier
nnoremap vv <Esc><Esc><C-V>
" Pressing Enter gets rid of highlight
xnoremap <CR> <Esc>
" Move cursor forward by a word with Ctrl+l
nnoremap <C-l> :execute 'normal! ' . v:count1 . 'w'<CR>
vnoremap <C-l> :execute 'normal! ' . v:count1 . 'w'<CR>
" Move cursor backward by a word with Ctrl+h
nnoremap <C-h> :execute 'normal! ' . v:count1 . 'b'<CR>
vnoremap <C-h> :execute 'normal! ' . v:count1 . 'b'<CR>
" Mapping Shift+" to surround text in quotation marks
vnoremap " <Esc>`>a"<Esc>`<i"<Esc>
" Mapping ' to surround text in quotation marks NO SHIFT
vnoremap ' <Esc>`>a'<Esc>`<i'<Esc>
" Mapping Shift+( to surround text in ()
vnoremap ( <Esc>`>a)<Esc>`<i(<Esc>
" Mapping Shift+{ to surround text in {}
vnoremap { <Esc>`>a}<Esc>`<i{<Esc>
" Mapping Shift+[ to surround text in [] 
vnoremap [ <Esc>`>a]<Esc>`<i[<Esc>
" Mapping Shift+* to surround text in ** 
vnoremap * <Esc>`>a*<Esc>`<i*<Esc>
vnoremap ** <Esc>`>a**<Esc>`<i**<Esc>
vnoremap *** <Esc>`>a***<Esc>`<i***<Esc>
" Copy selected text to the Wayland clipboard using wl-copy AND copies the selection into the vim register
xnoremap <C-c> y:call system('wl-copy', getreg('"'))<CR>
" Map Ctrl-v to paste from system clipboard
nnoremap <C-v> :r !wl-paste -n<CR>
" Helps so when I do 77j it goes to the correct line
function! SmartGJ()
    return v:count > 0 ? 'j' : 'gj'
endfunction
function! SmartGK()
    return v:count > 0 ? 'k' : 'gk'
endfunction
noremap <expr> j SmartGJ()
noremap <expr> k SmartGK()
noremap <C-j> j
noremap <C-k> k

" Replicates IDE's when pressing return after curly brace or bracket
inoremap {<cr> {<cr>}<c-o>O
inoremap [<cr> [<cr>]<c-o>O
" Adds &emsp; when pressing tt in normal mode
nnoremap tt i&emsp;&emsp;&emsp;<Esc>a

" FOR CURSOR SHAPE
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
	" Set cursor shape in Insert mode
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
	set ttimeout
	set ttimeoutlen=1
	set ttyfast
else
	" Set cursor shape in Insert mode
	let &t_SI = "\e[6 q"
	" Set cursor shape in Replace mode
	let &t_SR = "\e[2 q"
	" Set cursor shape in Normal mode
	let &t_EI = "\e[2 q"
	set ttimeout
	set ttimeoutlen=1
	set ttyfast
endif
" Reset cursor shape on Vim exit
autocmd VimLeave * silent !echo -ne "\e[6 q"
" Set cursor shape to block on Vim enter
autocmd VimEnter * silent !echo -ne "\e[2 q"
