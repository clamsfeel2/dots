set encoding=utf-8
set nocompatible
filetype on
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-eunuch'
Plugin 'ludovicchabant/vim-gutentags'
call vundle#end()
filetype plugin indent on
filetype plugin on
set modeline
syntax on
set mouse=a
set number
set relativenumber
set tabstop=4
set shiftwidth=4
set softtabstop=4
set title
set autoindent
set shiftround
set wrap
set linebreak
set smoothscroll
set display+=lastline
set showmatch
set matchpairs+=(:),{:},[:],<:>
" Should not allow scatch preview to open... ever
set completeopt-=preview
" Changing leader from '\' to space
let mapleader="\<Space>"

" Makes it so vim uses terminal background -- just makes the syntax coloring the same in and out of tmux
set background=

" Pressing F11 shows how many occurences of searched word there are
function! SearchAndCount()
    let search_pattern = @/
    execute ':%s/' . search_pattern . '//n'
    return search_pattern
endfunction
nnoremap <F11> :let @/ = SearchAndCount()<CR>

" FINDING FILES
"     Allows to enter :find [file path] and hit tab for fzf like search for files
set path +=**
set wildmenu

" BUFFER "
nnoremap gb :buffers<CR>:buffer<Space>
nnoremap <leader>bn   :bprevious<CR>
nnoremap <leader>bp :bnext<CR>

" TABS "
" TAB BINDS "
"" Cycling thorugh tabs 
nnoremap <leader>l gt
nnoremap <leader>h gT
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

"" STATUS LINE AND TABS AND FOLDS COLORING
set splitright
set fillchars=vert:│,fold:┈,diff:┈ 
set statusline +=%1*\ %n\ %*            "buffer number
set cursorline
" Turns off highlight
highlight CursorLine ctermbg=NONE guibg=NONE gui=NONE cterm=NONE 
" Turns on color of line numbers line color
hi CursorLineNr term=bold cterm=bold ctermfg=109 ctermbg=NONE  gui=bold
highlight LineNr ctermfg=gray guifg=#555555
set statusline +=%2*%m%r%w\                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%1*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%1*0x%04B\ %*          "character under cursor
hi User1 ctermfg=white
hi User2 ctermfg=white cterm=bold
hi User3 ctermfg=white cterm=bold     "file type
hi User4 ctermfg=white                "file path
hi User5 ctermfg=white                "file format
hi TabLineFill term=bold cterm=bold 
hi TabLine ctermfg=Grey ctermbg=NONE cterm=NONE
hi TabLineSel cterm=bold ctermfg=Green ctermbg=NONE
hi Folded ctermbg=NONE ctermfg=white term=bold

" FOR SPELL CHECKING
" Set spell checking for text, markdown, and TeX files
hi clear SpellBad
hi SpellBad cterm=underline ctermul=1 ctermfg=red
hi clear SpellCap
hi SpellCap cterm=underline ctermul=0 ctermfg=blue
autocmd BufNewFile,BufRead *.txt,*.md,*.tex setlocal spell
" Function to set nospell when entering a help buffer
function! SetNoSpell()
    if &filetype == 'help'
        setlocal nospell
    endif
endfunction
" Automatically call SetNoSpell when entering a buffer
autocmd BufEnter *.txt,*.md,*.tex call SetNoSpell()

" For highlighting search results
set hlsearch  " enabling searching
set incsearch " enabling show as type
hi IncSearch cterm=bold ctermfg=blue ctermbg=NONE
hi Search cterm=bold ctermfg=blue ctermbg=NONE
" Maps Enter key to noh to turn highlight off
nnoremap <CR> :noh<CR>
" For when typing :Explore -- first one gets rid of banner
let g:netrw_banner = 0
" Get's rid of border color
highlight VertSplit cterm=NONE

" SYNTAX HIGHLIGHTING
" Enable highlighting of C++11 attributes
let g:cpp_attributes_highlight = 1
" Highlight struct/class member variables (affects both C and C++ files)
let g:cpp_member_highlight = 1
" Put all standard C and C++ keywords under Vim's highlight group 'Statement'
" (affects both C and C++ files)
let g:cpp_simple_highlight = 1
" For markdown syntax --- not sure if needed
autocmd FileType markdown syntax on

" PLUGIN SETTINGS
" Gutentags -- ctags automator cuz every solution I had sucked so I use plugin :(
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['*.cpp', '.git']
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/') " all tags will be dir not random locations
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
" Files to exclude form ctag generation
let g:gutentags_ctags_exclude = [
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]

" YOUCOMPLETEME
" Changes color for YCM popup window 15 white 3 yellow
highlight Pmenu ctermfg=225 cterm=bold ctermbg=NONE guifg=#ffffff guibg=NONE
" turn off automatic YouCompleteMe cursor hover info
let g:ycm_auto_hover = ''
" toggle language hover info with F12
map <F12> <plug>(YCMHover)
" Changes the color of when fixme or todo are typed
highlight todo ctermfg=220 cterm=bold ctermbg=NONE
highlight fix ctermfg=228 cterm=bold ctermbg=NONE

" KEY BINDINGS 
" Getting into block visual mode and exiting visual mode easier
nnoremap vv <Esc><Esc><C-V>
" Pressing Enter gets rid of highlight
xnoremap <CR> <Esc>
" Mapping Shift+" to surround text in quotation marks
vnoremap " <Esc>`>a"<Esc>`<i"<Esc>
" Mapping ' to surround text in quotation marks NO SHIFT
vnoremap ' <Esc>`>a'<Esc>`<i'<Esc>
" Mapping Shift+( to surround text in ()
vnoremap ( <Esc>`>a)<Esc>`<i(<Esc>
" Mapping Shift+{ to surround text in {}
vnoremap { <Esc>`>a}<Esc>`<i{<Esc>
" Mapping Shift+[ to surround text in [] 
vnoremap [ <Esc>`>a]<Esc>`<i[<Esc>
" Mapping Shift+* to surround text in ** 
vnoremap * <Esc>`>a*<Esc>`<i*<Esc>
vnoremap ** <Esc>`>a**<Esc>`<i**<Esc>
vnoremap *** <Esc>`>a***<Esc>`<i***<Esc>
" Maps gj and gk to Control+j and Control+k to easily navigate to each line
noremap <C-j> j
noremap <C-k> k
noremap j gj
noremap k gk
" Replicates IDE's when pressing return after curly brace or bracket
inoremap {<cr> {<cr>}<c-o>O
inoremap [<cr> [<cr>]<c-o>O

" FOR CURSOR SHAPE
" So it shows (beam = inser, block = normal && visual && replace)
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
	" Set cursor shape in Insert mode
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
	set ttimeout
	set ttimeoutlen=1
	set ttyfast
else
	" Set cursor shape in Insert mode
	let &t_SI = "\e[6 q"
	" Set cursor shape in Replace mode
	let &t_SR = "\e[2 q"
	" Set cursor shape in Normal mode
	let &t_EI = "\e[2 q"
	set ttimeout
	set ttimeoutlen=1
	set ttyfast
endif
" Reset cursor shape on Vim exit
autocmd VimLeave * silent !echo -ne "\e[6 q"
" Set cursor shape to block on Vim enter
autocmd VimEnter * silent !echo -ne "\e[2 q"
